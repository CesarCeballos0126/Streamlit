####################
# Import packages 
####################
from typing import Literal
from bokeh.core.property.primitive import String
import streamlit as st
from bokeh.plotting import figure, show
import pandas as pd
import time
from math import pi
from bokeh.plotting import figure, output_notebook, show, ColumnDataSource, output_file, save
from bokeh.models import FactorRange, Legend, DatetimeTickFormatter, formatters, HoverTool, LinearAxis, Range1d, LabelSet, Label, Arrow, NormalHead, OpenHead
from bokeh.palettes import Bokeh, Category20c
from bokeh.transform import factor_cmap, dodge
from bokeh.models.widgets import Panel, Tabs
from bokeh.core.properties import value


####################
# Page Titre et Configuration 
####################
st.set_page_config(
     page_title="PowerPy",
     page_icon="üßä",
     layout="wide",
     initial_sidebar_state="expanded" 
)

st.image("ener3.png", use_column_width = True)
st.title("Pr√©diction de la Consommation d'√âlectricit√©" )

st.sidebar.title("Projet : PowerPy")
st.sidebar.header("Options")

st.write("""
Objectif : Pr√©dire la Consommation Moyenne en MW en Ile de France
""")

st.text("")


####################
# Text Box 
####################

# Variables + description
st.write("### Variables du jeu de donn√©es")
st.text("")

# Charger les donn√©es description_donnees
description_donnees = pd.read_csv('./predictions_csv/Description_donnees.csv', sep=';')

st.dataframe(description_donnees)


# Afficher les valeurs des variables Code INSEE et Region
Detail_Region = description_donnees.Valeurs[1]
if st.checkbox('Afficher les valeurs de la variable R√©gion'):
   Detail_Region
Detail_Insee = description_donnees.Valeurs[0]
if st.checkbox('Afficher les valeurs de la variable Code INSEE'):
   Detail_Insee

# Dimensions DF
st.write("Dimension DataFrame S√©ries Temporelles : (2891, **2**)")
st.write("Dimension DataFrame Mod√®les de R√©gression : (2891, 29)")
st.text("")

# Evolution de la consommation et de la production
st.write("### √âvolution de la Consommation / Production d'√âlectricit√©")

####################
# Chargement des donn√©es
####################

# Charger les donn√©es df_evo_conso
df_evo_conso = pd.read_csv('./predictions_csv/df_evo_conso.csv', sep=';', index_col=0, parse_dates=['Date'])

# Charger les donn√©es df_evo_conso sans fluctuations 
df_evo_conso_sans = pd.read_csv('./predictions_csv/def_evo_conso_sans.csv', sep=';', index_col=0, parse_dates=['Date'])

# Charger les donn√©es de Production df_group_date_prod
df_group_date_prod = pd.read_csv('./predictions_csv/df_group_date_prod.csv', sep=',', index_col=0)
df_group_date_prod['Annee'] = df_group_date_prod['Annee'].astype(str)

# Charger les donn√©es df_group et df_group_somme
df_group = pd.read_csv('./predictions_csv/df_group.csv', sep=',', index_col=0)
df_group_somme = pd.read_csv('./predictions_csv/df_group_somme.csv', sep=',', index_col=0)

# Chargement des pr√©dictions
ridge_model_1 = pd.read_csv('./predictions_csv/Ridge.csv', sep=',', index_col=0, parse_dates=[0])
lasso_model_1 = pd.read_csv('./predictions_csv/Lasso.csv', sep=',', index_col=0, parse_dates=[0])
EN_model = pd.read_csv('./predictions_csv/Elastic.csv', sep=',', index_col=0, parse_dates=[0])
sgd_model = pd.read_csv('./predictions_csv/SGD.csv', sep=',', index_col=0, parse_dates=[0])
model_arima_df = pd.read_csv('./predictions_csv/Arima.csv', sep=',', index_col=0, parse_dates=[0])
model_sarima_df = pd.read_csv('./predictions_csv/Sarima.csv', sep=',', index_col=0, parse_dates=[0])
model_sarimax_df = pd.read_csv('./predictions_csv/Sarimax.csv', sep=',', index_col=0, parse_dates=[0])
model_sarimaxlog_df = pd.read_csv('./predictions_csv/SarimaxLog.csv', sep=',', index_col=0, parse_dates=[0])

# Chargement de r√©sultats scores
comparaison_scores = pd.read_csv('./predictions_csv/Scores.csv', sep=',', index_col=0)


####################
# Texte Box / Cases √† cocher
####################

# Case √† cocher 1
if st.checkbox("Voir l'√©volution de la Consommation d'√âlectricit√© ?"): 

    # Source de donn√©es pour les graphiques
    source1 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 11])
    source2 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 24])
    source3 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 27])
    source4 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 28])
    source5 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 32])
    source6 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 44])
    source7 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 52])
    source8 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 53])
    source9 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 75])
    source10 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 76])
    source11= ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 84])
    source12 = ColumnDataSource(df_evo_conso[df_evo_conso['Code INSEE r√©gion']== 93])

    # List de tools
    TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

    # Figure
    y_overlimit = 0.05 
    p = figure(plot_width = 700, plot_height = 400,     
            title = "Evolution de la Consommation d'√âlectricit√© par R√©gion",                    
            x_axis_label = 'Date', x_axis_type="datetime",
            y_axis_label = 'Consommation Moyenne (MW)',
            toolbar_location="below",
            tools=TOOLS)  

    p.title.text_color = "darkblue"
    p.title.text_font = "times"
    p.title.text_font_size = "20px"
    p.title.align = 'center'

    # Courves
    p.line(x='Date', y = 'Consommation (MW)', color = '#3182bd', legend_label = '√éle-de-France', source = source1)   
    p.line(x='Date', y = 'Consommation (MW)', color = '#6baed6', legend_label = 'Centre-Val de Loire', source = source2)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#9ecae1', legend_label = 'Bourgogne-Franche-Comt√©', source = source3)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#c6dbef', legend_label = 'Normandie', source = source4)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#e6550d', legend_label = 'Hauts-de-France', source = source5)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#fd8d3c', legend_label = 'Grand Est', source = source6)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#fdae6b', legend_label = 'Pays de la Loire', source = source7)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#fdd0a2', legend_label = 'Bretagne', source = source8)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#31a354', legend_label = 'Nouvelle-Aquitaine', source = source9)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#74c476', legend_label = 'Occitanie', source = source10)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#a1d99b', legend_label = 'Auvergne-Rh√¥ne-Alpes', source = source11)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#c7e9c0', legend_label = "Provence-Alpes-C√¥te d'Azu", source = source12)  

    # Paramettres axis
    p.xaxis.major_label_orientation = pi/4
    p.xgrid.grid_line_color = None
    p.ygrid.grid_line_color = None
    p.xaxis.ticker.desired_num_ticks = 10

    # Activation de l'interaction avec la l√©gende
    p.legend.location = (0,-50)
    p.legend.click_policy = 'hide'

    # Style hover
    p.add_tools(HoverTool(
        tooltips=[('Date', '@Date{%Y-%m-%d}'),
            ('Consommation (MW)', '@{Consommation (MW)}{0.00}')
            ],
        formatters={'@Date': 'datetime'}
    ))

    st.bokeh_chart(p, use_container_width=True)


# Case √† cocher 2
if st.checkbox("Voir la tendance de la Consommation d'√âlectricit√© ?"): 

    # Source de donn√©es pour les graphiaques
    source1 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 11])
    source2 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 24])
    source3 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 27])
    source4 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 28])
    source5 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 32])
    source6 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 44])
    source7 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 52])
    source8 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 53])
    source9 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 75])
    source10 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 76])
    source11= ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 84])
    source12 = ColumnDataSource(df_evo_conso_sans[df_evo_conso_sans['Code INSEE r√©gion']== 93])

    # List de tools
    TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

    # Figure
    y_overlimit = 0.05 
    p = figure(plot_width = 800, plot_height = 600,     
            title = "Tendance de la Consommation d'√âlectricit√© par R√©gion",                    
            x_axis_label = 'Date', x_axis_type="datetime",
            y_axis_label = 'Consommation Moyenne (MW)',
            toolbar_location="below",
            tools=TOOLS)  

    p.title.text_color = "darkblue"
    p.title.text_font = "times"
    p.title.text_font_size = "20px"
    p.title.align = 'center'

    # Courves
    p.line(x='Date', y = 'Consommation (MW)', color = '#3182bd', legend_label = '√éle-de-France', source = source1)   
    p.line(x='Date', y = 'Consommation (MW)', color = '#6baed6', legend_label = 'Centre-Val de Loire', source = source2)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#9ecae1', legend_label = 'Bourgogne-Franche-Comt√©', source = source3)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#c6dbef', legend_label = 'Normandie', source = source4)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#e6550d', legend_label = 'Hauts-de-France', source = source5)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#fd8d3c', legend_label = 'Grand Est', source = source6)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#fdae6b', legend_label = 'Pays de la Loire', source = source7)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#fdd0a2', legend_label = 'Bretagne', source = source8)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#31a354', legend_label = 'Nouvelle-Aquitaine', source = source9)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#74c476', legend_label = 'Occitanie', source = source10)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#a1d99b', legend_label = 'Auvergne-Rh√¥ne-Alpes', source = source11)  
    p.line(x='Date', y = 'Consommation (MW)', color = '#c7e9c0', legend_label = "Provence-Alpes-C√¥te d'Azu", source = source12)  

    # Axis
    p.xaxis.major_label_orientation = pi/4
    p.xgrid.grid_line_color = None
    p.ygrid.grid_line_color = None
    p.xaxis.ticker.desired_num_ticks = 10

    # Citation
    citation = Label(x=400, y=110, x_units='screen', y_units='screen',
                    text="Sans fluctuations saisonniers", render_mode='css')

    # Activation de l'interaction avec la l√©gende
    p.legend.location = "top_left"
    p.legend.click_policy = 'hide'
    p.add_layout(citation)

    # Style hover
    p.add_tools(HoverTool(
        tooltips=[('Date', '@Date{%Y-%m-%d}'),
            ('Consommation (MW)', '@{Consommation (MW)}{0.00}')
            ],
        formatters={'@Date': 'datetime'}
    ))

    st.bokeh_chart(p, use_container_width=True)

# Case √† cocher 3
if st.checkbox("Voir la Consommation / Production d'√âlectricit√© par Region ?"): 

    # Source de donn√©es
    source_data = ColumnDataSource(df_group)
    source_data2 = ColumnDataSource(df_group_somme)
    Type_cmap = factor_cmap('R√©gion', palette=df_group['color'].unique(), factors=df_group['R√©gion'].unique())

    # List de tools
    TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

    # Figure 1
    y_overlimit = 0.05 
    p1 = figure(plot_width = 800, plot_height = 750,     
            title = "Consommation Moyenne d'√âlectricit√© par R√©gion / Mois",                    
            x_axis_label = 'R√©gion',
            y_axis_label = 'Consommation Moyenne (MW)',
            toolbar_location="below",
            x_range=df_group['R√©gion'],
            tools=TOOLS)  
    p1.vbar(x='R√©gion', top='Consommation (MW)', width=0.8, source=source_data,line_color=Type_cmap, fill_color=Type_cmap,
    legend_group='R√©gion', hover_line_color="black")

    p1.title.text_color = "darkblue"
    p1.title.text_font = "times"
    p1.title.text_font_size = "20px"
    p1.title.align = 'center'

    p1.xaxis.major_label_orientation = pi/4
    p1.xgrid.grid_line_color = None
    p1.ygrid.grid_line_color = None
    p1.legend.location = "top_left"
    p1.x_range = FactorRange(factors=df_group['R√©gion'])

    p1.add_tools(HoverTool(tooltips=[('Consommation (MW)', '@{Consommation (MW)}{0.00}')]))
    p1.legend.click_policy = 'hide'

    # Figure 2
    p2 = figure(plot_width = 800, plot_height = 750,     
            title = "Production Moyenne d'√âlectricit√© par R√©gion / Mois",                    
            x_axis_label = 'R√©gion',
            y_axis_label = 'Production Moyenne (MW)',
            toolbar_location="below",
            x_range=df_group['R√©gion'],
            tools=TOOLS)  
    p2.vbar(x='R√©gion', top='Total', width=0.8, source=source_data2,line_color=Type_cmap, fill_color=Type_cmap,
    legend_group='R√©gion', hover_line_color="black")

    p2.title.text_color = "darkblue"
    p2.title.text_font = "times"
    p2.title.text_font_size = "20px"
    p2.title.align = 'center'

    p2.xaxis.major_label_orientation = pi/4
    p2.xgrid.grid_line_color = None
    p2.ygrid.grid_line_color = None
    p2.legend.location = "top_left"
    p2.x_range = FactorRange(factors=df_group_somme['R√©gion'])

    p2.add_tools(HoverTool(tooltips=[('Production moyenne', '@Total{0.00}')]))
    p2.legend.click_policy = 'hide'

    # Tabs
    tab1 = Panel(child=p1, title="Consommation (MW)")
    tab2 = Panel(child=p2, title="Production")

    tabs = Tabs(tabs=[ tab1, tab2 ])

    st.bokeh_chart(tabs, use_container_width=True)


# Case √† cocher 4
if st.checkbox("Voir l'√©volution de la Production d'√âlectricit√© par nature ?"): 

    # Source Graphique 1
    data = df_group_date_prod.to_dict(orient='list')
    idx = df_group_date_prod['Annee'].tolist()
    source = ColumnDataSource(data=data)

    TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

    # Figure 1
    p1 = figure(x_range=idx, y_range=(0, df_group_date_prod[['Consommation (MW)',
    'Thermique (MW)','Nucl√©aire (MW)','Eolien (MW)','Solaire (MW)','Hydraulique (MW)','Bio√©nergies (MW)']].values.max()), 
            plot_width = 900, plot_height = 600, title="Production d'√âlectricit√© Moyenne par Nature / Ann√©e",
            toolbar_location="below",
            tools=TOOLS,
            x_axis_label = 'Ann√©e',
            y_axis_label = 'Production Moyenne (MW)')

    # Graphique √† Barres
    p1.vbar(x=dodge('Annee', -0.4, range=p1.x_range), top='Thermique (MW)', width=0.2, source=source,
        color="#F05223", legend_label='Thermique (MW)')
    p1.vbar(x=dodge('Annee', -0.2, range=p1.x_range), top='Nucl√©aire (MW)', width=0.2, source=source,
        color="#F6A91B", legend_label='Nucl√©aire (MW)')
    p1.vbar(x=dodge('Annee', 0, range=p1.x_range), top='Eolien (MW)', width=0.2, source=source,
        color="#A5CD39", legend_label='Eolien (MW)')
    p1.vbar(x=dodge('Annee', 0.2, range=p1.x_range), top='Solaire (MW)', width=0.2, source=source,
        color="#20B254", legend_label='Solaire (MW)')
    p1.vbar(x=dodge('Annee', 0.4, range=p1.x_range), top='Hydraulique (MW)', width=0.2, source=source,
        color="#00AAAE", legend_label='Hydraulique (MW)')
    p1.vbar(x=dodge('Annee', 0.6, range=p1.x_range), top='Bio√©nergies (MW)', width=0.2, source=source,
        color="#892889", legend_label='Bio√©nergies (MW)')

    # Axis Graphique 1
    p1.title.text_color = "darkblue"
    p1.title.text_font = "times"
    p1.title.text_font_size = "20px"
    p1.title.align = 'center'

    p1.x_range.range_padding = 0.2
    p1.xgrid.grid_line_color = None
    p1.axis.minor_tick_line_color = None
    p1.outline_line_color = None
    p1.legend.location = "top_left"
    p1.legend.orientation = "horizontal"

    p1.legend.click_policy = 'hide'

    # Style hover
    p1.add_tools(HoverTool(
        tooltips=[#('Date', '@Date{%Y-%m-%d}'),
            #('Consommation (MW)', '@{Consommation (MW)}{0.00}'),
            ('Thermique (MW)', '@{Thermique (MW)}{0.00}'),
            ('Nucl√©aire (MW)', '@{Nucl√©aire (MW)}{0.00}'),
            ('Eolien (MW)', '@{Eolien (MW)}{0.00}'),
            ('Solaire (MW)', '@{Solaire (MW)}{0.00}'),
            ('Hydraulique (MW)', '@{Hydraulique (MW)}{0.00}'),
            ('Bio√©nergies (MW)', '@{Bio√©nergies (MW)}{0.00}')
            ]
    ))
    
    # -----------------------
  
    # Figure 2
    p2 = figure(x_range=idx, y_range=(0, df_group_date_prod[['Consommation (MW)',
    'Thermique (MW)','Nucl√©aire (MW)','Eolien (MW)','Solaire (MW)','Hydraulique (MW)','Bio√©nergies (MW)']].values.max()), 
            plot_width = 900, plot_height = 600, title="Evolution de la Production d'√âlectricit√© par Nature / Ann√©e",
            toolbar_location="below",
            tools=TOOLS,
            x_axis_label = 'Ann√©e',
            y_axis_label = 'Production Moyenne (MW)')


    # Source Graphique 2
    data1 = df_group_date_prod[['Consommation (MW)','Annee']]
    data2 = df_group_date_prod[['Thermique (MW)','Annee']]
    data3 = df_group_date_prod[['Nucl√©aire (MW)','Annee']]
    data4 = df_group_date_prod[['Eolien (MW)','Annee']]
    data5 = df_group_date_prod[['Solaire (MW)','Annee']]
    data6 = df_group_date_prod[['Hydraulique (MW)','Annee']]
    data7 = df_group_date_prod[['Bio√©nergies (MW)','Annee']]

    source1 = ColumnDataSource(data=data1)
    source2 = ColumnDataSource(data=data2)
    source3 = ColumnDataSource(data=data3)
    source4 = ColumnDataSource(data=data4)
    source5 = ColumnDataSource(data=data5)
    source6 = ColumnDataSource(data=data6)
    source7 = ColumnDataSource(data=data7)

    # Graphique √† lignes
    p2.line(x='Annee', y = 'Thermique (MW)', color = '#F05223', legend_label = 'Thermique (MW)', source = source2, line_width=2)   
    p2.line(x='Annee', y = 'Nucl√©aire (MW)', color = '#F6A91B', legend_label = 'Nucl√©aire (MW)', source = source3, line_width=2)   
    p2.line(x='Annee', y = 'Eolien (MW)', color = '#A5CD39', legend_label = 'Eolien (MW)', source = source4, line_width=2)   
    p2.line(x='Annee', y = 'Solaire (MW)', color = '#20B254', legend_label = 'Solaire (MW)', source = source5, line_width=2)   
    p2.line(x='Annee', y = 'Hydraulique (MW)', color = '#00AAAE', legend_label = 'Hydraulique (MW)', source = source6, line_width=2)   
    p2.line(x='Annee', y = 'Bio√©nergies (MW)', color = '#892889', legend_label = 'Bio√©nergies (MW)', source = source7, line_width=2)   

    # Axis Graphique 2
    p2.title.text_color = "darkblue"
    p2.title.text_font = "times"
    p2.title.text_font_size = "20px"
    p2.title.align = 'center'

    p2.x_range.range_padding = 0.2
    p2.xgrid.grid_line_color = None
    p2.axis.minor_tick_line_color = None
    p2.outline_line_color = None
    p2.legend.location = "top_left"
    p2.legend.orientation = "horizontal"
    p2.legend.click_policy = 'hide'

    # Tabs
    tab1 = Panel(child=p1, title="Production par Nature")
    tab2 = Panel(child=p2, title="√âvolution production")
    tabs = Tabs(tabs=[ tab1, tab2 ])

    st.bokeh_chart(tabs, use_container_width=True)


st.text("")

##################
# Check Box Barre Lateral Option 1
##################

if st.sidebar.checkbox('Pr√©dictions par Mod√®le'):
   option = st.sidebar.selectbox("Mod√®le √† utiliser :", 
   ("Lasso","Ridge","ElasticCV","SGDRegressor","ARIMA","SARIMA","SARIMAX","SARIMAXLog"))
   st.header(f"Pr√©dictions quotidiennes Ile de France, Mod√®le {option}")
   with st.spinner('Attends moi...'):
     time.sleep(2)
     st.success("C'est fait !!")
   # Graphieques individuelles
   if option == "Ridge":

        #Source
        source1 = ColumnDataSource(ridge_model_1)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "R√©gression du Mod√®le Ridge",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Ridge
        p.line(x='Date', y ='predits', color = "#EC1557", legend_label = "Ridge", source = source1) 
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source1)
    
        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source1)
        
        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "Lasso":
        #Source
        source2 = ColumnDataSource(lasso_model_1)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "R√©gression du Mod√®le Lasso",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Lasso 
        p.line(x='Date', y ='predits', color = "#892889",legend_label = "Lasso", source = source2) 
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source2)

        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source2)
    
        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "ElasticCV":

        #Source
        source3 = ColumnDataSource(EN_model)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "R√©gression du mod√®le Elastic-Net",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        
        #Elastic Net
        p.line(x='Date', y ='predits', color = "#F6A91B",legend_label = "Elastic", source = source3) 
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source3) 
    
        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source3)

        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "SGDRegressor":
        #Source
        source7 = ColumnDataSource(sgd_model)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "R√©gression du mod√®le SGDR",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #SGD
        p.line(x='Date', y ='predits', color = "#892889",legend_label = "SGD", source = source7)
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source7) 
        
        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source7)
    
        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "ARIMA":
        #Source
        source4 = ColumnDataSource(model_arima_df)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "Mod√®le de s√©ries Temporelles ARIMA[2,1,3]",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Arima
        p.line(x='Date', y ='predits', color = "#A5CD39", legend_label = "ARIMA", source = source4)
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source4)  
        
        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        #y_column2_range = "T" + "_range"
        #p.extra_y_ranges = {
        #    y_column2_range: Range1d(
        #        start=ridge_model_1['T'].min() * (1 - y_overlimit),
        #        end=ridge_model_1['T'].max() * (1 + y_overlimit),
        #    )
        #}
        #p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        #p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source4)
    
        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "SARIMA":
        #Source
        source5 = ColumnDataSource(model_sarima_df)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "Mod√®le de S√©ries Temporelles SARIMA(3,1,0)(3,1,0)[7]",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Sarima
        p.line(x='Date', y ='predits', color = "#20B254", legend_label = "SARIMA", source = source5)
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source5) 
    
        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        #y_column2_range = "T" + "_range"
        #p.extra_y_ranges = {
        #    y_column2_range: Range1d(
        #        start=ridge_model_1['T'].min() * (1 - y_overlimit),
        #        end=ridge_model_1['T'].max() * (1 + y_overlimit),
        #    )
        #}
        #p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        #p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source5)

        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "SARIMAXLog":
        #Source
        source8 = ColumnDataSource(model_sarimaxlog_df)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "Mod√®le de s√©ries temporelles SARIMAX(3,1,0)(5,1,1)[7]",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Sarimax
        p.line(x='Date', y ='predits', color = "orange", legend_label = "SARIMAXLog", source = source8)
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source8)  

        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source8)

        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

   if option == "SARIMAX":
        #Source
        source6 = ColumnDataSource(model_sarimax_df)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        # Figure
        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "Mod√®le de s√©ries temporelles SARIMAX(3,1,2)(3,1,0)[7]",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        # Axis
        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Sarimax
        p.line(x='Date', y ='predits', color = "#00AAAE", legend_label = "SARIMAX", source = source6)
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source6)  

        # Axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source6)

        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

st.write("")


##################
# Check Box Barre Lateral Option 2
##################

if st.sidebar.checkbox('Comparaison par groups de mod√®les'):
    option2 = st.sidebar.selectbox("Comparaison Mod√®les :", ("Mod√®les de R√©gression","S√©ries Temporelles"))
    st.header(option2)
    my_bar = st.progress(0)
    for percent_complete in range(100):
        time.sleep(0.02)
        my_bar.progress(percent_complete + 1)

    if option2 == "Mod√®les de R√©gression":
        #Source
        source1 = ColumnDataSource(ridge_model_1)
        source2 = ColumnDataSource(lasso_model_1)
        source3 = ColumnDataSource(EN_model)
        source7 = ColumnDataSource(sgd_model)
        source4 = ColumnDataSource(model_arima_df)
        source5 = ColumnDataSource(model_sarima_df)
        source6 = ColumnDataSource(model_sarimax_df)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "Comparaison Ridge, Lasso, Elastic-Net, SGDR",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Valeurs R√©elles
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source6)   

        #Ridge
        p.line(x='Date', y ='predits', color = "#EC1557", legend_label = "Ridge", source = source1) 
    
        #Lasso 
        p.line(x='Date', y ='predits', color = "#892889",legend_label = "Lasso", source = source2) 

        #Elastic Net
        p.line(x='Date', y ='predits', color = "#F6A91B",legend_label = "Elastic", source = source3) 

        #SGD
        p.line(x='Date', y ='predits', color = "#892889",legend_label = "SGD", source = source7) 

        # axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source1)
        
        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True);

    if option2 == "S√©ries Temporelles":
        #Source
        source1 = ColumnDataSource(ridge_model_1)
        source2 = ColumnDataSource(lasso_model_1)
        source3 = ColumnDataSource(EN_model)
        source7 = ColumnDataSource(sgd_model)
        source4 = ColumnDataSource(model_arima_df)
        source5 = ColumnDataSource(model_sarima_df)
        source6 = ColumnDataSource(model_sarimax_df)

        # List de tools
        TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset"

        y_overlimit = 0.05 
        p = figure(plot_width = 900, plot_height = 550,     
                title = "Comparaison ARIMA, SARIMA, SARIMAX",                    
                x_axis_label = 'Date', x_axis_type="datetime",
                y_axis_label = 'Consommation Moyenne',
                toolbar_location="below",
                tools=TOOLS)  

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        p.xaxis.major_label_orientation = pi/4
        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None
        p.xaxis.ticker.desired_num_ticks = 29

        #Valeurs R√©elles
        p.line(x='Date', y = 'Reel', color = "navy", legend_label = "Valeurs r√©ellees", source = source6)   

        #Arima
        p.line(x='Date', y ='predits', color = "#A5CD39", legend_label = "ARIMA", source = source4) 

        #Sarima
        p.line(x='Date', y ='predits', color = "#20B254", legend_label = "SARIMA", source = source5) 

        #Sarimax
        p.line(x='Date', y ='predits', color = "#00AAAE", legend_label = "SARIMAX", source = source6) 

        # axis y, gauche
        p.y_range = Range1d(ridge_model_1.Reel.min() * (1 - y_overlimit), ridge_model_1.predits.max() * (1 + y_overlimit))

        # Axis y, droite
        y_column2_range = "T" + "_range"
        p.extra_y_ranges = {
            y_column2_range: Range1d(
                start=ridge_model_1['T'].min() * (1 - y_overlimit),
                end=ridge_model_1['T'].max() * (1 + y_overlimit),
            )
        }
        p.add_layout(LinearAxis(y_range_name=y_column2_range), "right")

        p.line( x='Date', y = 'T', color="grey", legend_label="T (C¬∞)", y_range_name=y_column2_range, source = source1)
        
        # Activation de l'interaction avec la l√©gende
        p.legend.location = "top_left"
        p.legend.click_policy = 'hide'

        # Style hover
        p.add_tools(HoverTool(
            tooltips=[('Date', '@Date{%Y-%m-%d}'),
                ('Pr√©diction', '@predits{0.00}'),
                ('Valeur r√©elle', '@Reel{0.00}'),
                ('C¬∞', "@T{0.00}")],
            formatters={'@Date': 'datetime'}
        ))

        st.bokeh_chart(p, use_container_width=True)
        
        st.markdown("""
        Nous avons utilis√© l'outil d'evaluation "Crit√©re d'Information Akaike - AIC", 
        afin d'√©valuer la bonne ad√©quation du mod√®le pour les predictions et comparer aussi plusieurs mod√®les 
        (plusieurs param√®tres (p)(q)(P)(Q)).

        Rappel :
        * Un mod√®le qui fait des meilleurs pr√©visions re√ßoit un score AIC inf√©rieur
        * AIC privilege les mod√®les simples, donc moins de parametres

        #### Diagnostic du mod√®le
        - Prob(Q) est la valeur de p associ√©e √† l'hypoth√®se nulle selon laquelle les r√©sidus n'ont pas de structure de corr√©lation
        - Prob(JB) est la valeur de p associ√©e √† l'hypoth√®se nulle selon laquelle les r√©sidus suivent une distribution normale

        Si une des ces valeurs est inf√©rieur √† 0.05 nous rejetons l'hypoth√®se
        * p valeu > 0.05 : H0 n'est pas rejet√©e. 
        * p valeu ‚â§ 0.05 : H0 est rejet√©e

        Sur l'ensemble, nous ne rejetons pas H0, cela signifie que nos r√©sidus n'ont pas de structure de corr√©lation 
        Par contre, nous rejetons H0 pour Prob(JB), donc les r√©sidus ne suivent pas une distribution normale
        """);

st.write("")

##################
# Check Box Barre Lateral Option 3
##################

if st.sidebar.checkbox('Scores'):
    option3 = st.sidebar.selectbox("Analyses des Scores :", ("MAPE","MSE", "RMSE"))
    if option3 == "MAPE":
        st.subheader("Analyse Score MAPE")
        source_scores = ColumnDataSource(comparaison_scores)
        #ouput_file('source_scores.html')
        # List de tools
        TOOLS="pan,wheel_zoom,box_zoom,reset"

        # Instanciation de la figure
        p = figure(y_range = comparaison_scores.Modele,           
                plot_width = 900, plot_height = 400,
                title = 'Mean Absolute Prediction Error - MAPE',
                x_axis_label = "Probabilit√© Moyenne d'erreur %",
                y_axis_label = 'Mod√®le',
                toolbar_location="below",
                tools=TOOLS) 
    
        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None

        # Instanciation d'un diagramme √† barres horizontales
        p.hbar(y = 'Modele',  right = 'MAPE', height = 0.5, color='Colors', source=source_scores)                  

        labels = LabelSet(x='MAPE', y='Modele', text='MAPE',source=source_scores)

        # Iteraction legend
        p.add_layout(labels)

        st.bokeh_chart(p, use_container_width=False);

        st.write("MAPE, moyenne des √©carts en valeur absolue par rapport aux valeurs observ√©es");


    if option3 == "MSE":
        st.subheader("Analyse Score MSE")
        #Source
        source_scores = ColumnDataSource(comparaison_scores)
        # List de tools
        TOOLS="pan,wheel_zoom,box_zoom,reset"

        # Instanciation de la figure
        p = figure(y_range = comparaison_scores.Modele,           
                plot_width = 900, plot_height = 400,
                title = 'Mean Square Error - MSE',
                x_axis_label = "Carr√© moyen des erreurs",
                y_axis_label = 'Mod√®le',
                toolbar_location="below",
                tools=TOOLS) 
        
        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None

        # Instanciation d'un diagramme √† barres horizontales
        p.hbar(y = 'Modele',  right = 'MSE', height = 0.5, color='Colors', source=source_scores)

        p.add_layout(Arrow(end=OpenHead(line_color="darkblue", line_width=4),
                        x_start=400000, y_start=3.5, x_end=250000, y_end=3.5))
        citation = Label(x=190, y=135, x_units='screen', y_units='screen',
                        text="valeur MSE la plus bas", render_mode='css')
        p.add_layout(citation)
        st.bokeh_chart(p, use_container_width=False)
        
        st.write("""
        MSE, c‚Äôest la moyenne arithm√©tique des carr√©s des √©carts entre pr√©visions du mod√®le et observations.
        Cette moyenne n'est autre que la VARIANCE R√âSIDUELLE que l'on cherche √† minimiser.
        Si on compare les MSE, le meilleur est bien s√ªr celui qui pr√©sente la valeur MSE la plus faible, ici SGDRegressor
        """);

    if option3 == "RMSE":
        st.subheader("Analyse Score RMSE")
        source_scores = ColumnDataSource(comparaison_scores)

        # List de tools
        TOOLS="pan,wheel_zoom,box_zoom,reset"

        # Instanciation de la figure
        p = figure(y_range = comparaison_scores.Modele,           
                plot_width = 900, plot_height = 400,
                title = 'Root Mean Square Error - RMSE',
                x_axis_label = "Racine carr√©e de la moyenne des erreurs quadratiques",
                y_axis_label = 'Mod√®le',
                toolbar_location="below",
                tools=TOOLS) 

        p.title.text_color = "darkblue"
        p.title.text_font = "times"
        p.title.text_font_size = "20px"
        p.title.align = 'center'

        p.xgrid.grid_line_color = None
        p.ygrid.grid_line_color = None

        # Instanciation d'un diagramme √† barres horizontales
        p.hbar(y = 'Modele',  right = 'RMSE', height = 0.5, color='Colors', source=source_scores)                  

        labels = LabelSet(x='RMSE', y='Modele', text='RMSE',source=source_scores)

        p.add_layout(Arrow(end=OpenHead(line_color="darkblue", line_width=4),
                        x_start=700, y_start=3.5, x_end=600, y_end=3.5))
        citation = Label(x=390, y=135, x_units='screen', y_units='screen',
                        text="valeur RMSE la plus bas", render_mode='css')

        # Iteraction legend
        p.add_layout(labels)
        p.add_layout(citation)

        st.bokeh_chart(p, use_container_width=False)
        st.write("""
        RMSE, c'est la racine carr√©e des diff√©rences entre les valeurs pr√©dites et les valeurs observ√©es. Ces √©carts sont appel√©s r√©sidus.
        Il s'agit d'une mesure de pr√©cision qui sert √† comparer les erreurs de diff√©rents mod√®les pr√©dictifs pour un ensemble de donn√©es particulier.
        Une valeur de RMSE plus petite indique une meilleur pr√©cision qu'une valeur de RMSE plus √©lev√©e.
        """);
